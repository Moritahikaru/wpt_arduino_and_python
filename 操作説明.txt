プログラム
Arduino：
WPT__sotu2.ino:送電側プログラム
WPT_sotu_zyu.ino:受電側プログラム
python:
wpt_sendfrequency.py：GUIプログラム。

プログラム説明：
ワイヤレス給電の周波数をGUIからマイコンを通してclock_genelatorに送る。
わざわざマイコンのプログラムを変更して周波数を送ることが面倒くさいからGUIで自動的に送るようにしている。
また、周波数スイープで送れるようにしてある。
操作方法：
一番下のコンボボックスから送電側受電側のあらかじめ送受電両方設定してあるArduinoのコンポーネントをそれぞれ
合わせて、Connectボタンを押す。
押せるボタンと、数字記入部分はそれぞれ以下のようになっている。
incread_frequency:閾値となる周波数(Hz)
first_frequency:初めの周波数(kHz).但し4kHz以上．
last_frequency:一番最後の周波数(kHz).
Measurement_Time:1つの周波数につき，計測する時間(ds).
例えば、測定する範囲が5kHzを初めに測り1kHzを閾値として100kHzまで測り、一つの周波数につき1秒測定する
という実験をしたい場合
incread_frequency -> 1000
first_frequency -> 5
last_frequency -> 100
Measurement_Time -> 10
と入力しstartボタンを押す。
また、一つの周波数でずっと測定したい場合、incread_frequency -> 0、first_frequency -> 測定したい周波数、他は適当に入力することで
実行できる。

データの保存について：
all:測定履歴
sweep:fre-send-receive:一つの周波数につき最頻値で一つに絞ったデータをここの周波数の電力としたもの．
sweep:fre-send:sweep:fre-send-receiveと同じ．但し出力されるデータは周波数と送電側のデータだけ．
sweep:fre-receive:fre-send-receiveと同じ．但し出力されるデータは周波数と受電側のデータだけ．
からそれぞれ選び、saveボタンを押すことで保存できる。


変更履歴：
・10秒に1回記録するのではなく，1つの周波数につき0.1ｓきざみで電力を出力させるようにした．
・1つの周波数につき，測定する時間を自分で決められるようにした．(但し，1秒以上.)
・加算する周波数をkHzではなく，Hzで代入するようにした．(2020/01/15)
---------------------------------------------------------------------------
・時間を0.1秒ずつでも周波数スイープできるように，秒数の1目盛りをds(デシ秒0.1秒)にした．
・データの保存方法を変えれるようにした．(2020/1/29)
---------------------------------------------------------------------------
・送電側受電側のCOMの設定をわざわざプログラム上に書き込まなければならなかったのでGUI上で設定変更できるようにした。
(2021/6/16)

